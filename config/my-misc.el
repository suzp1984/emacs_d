
(setq-default c-basic-offset 4)
;;(setq c-default-style "linux"
;;      c-basic-offset 4)
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)

(setq ring-bell-function (lambda () t))
(setq-default fill-column 60)

(show-paren-mode t)
(setq show-paren-mode 'parentheses)
(global-font-lock-mode t)

(menu-bar-mode 1)
(tool-bar-mode 0)
(setq confirm-kill-emacs 'yes-or-no-p)
;; do not use file dialog
(setq use-file-dialog nil)

;; autogenerated autoload file settings
(setq-default generated-autoload-file "loaddefs.el")

;; source code indent 
;; do not like gnu style
;; set tab-width in c mode
(defun my-c-common-set ()
  (setq tab-width 4)
  (add-to-list 'c-default-style '(c-mode . "linux"))
  (add-to-list 'c-default-style '(c++-mode . "linux"))
  (c-set-offset 'substatement-open 0))

(add-hook 'c-mode-hook
          'my-c-common-set)
;;(add-hook 'python-mode-hook
;;          my-c-common-set)

(defun indent-whole()
  (interactive)
  (indent-region (point-min) (point-max))
  (message "format successfully"))

(global-set-key [f7] 'indent-whole)

(add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))

(defun my-match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
 	((looking-at "\\s\)") (forward-char 1) (backward-list 1))
 	(t (self-insert-command (or arg 1)))))

(global-set-key "%" 'my-match-paren)

(defun line-to-top-window ()
  "Move the line point to top of windows"
  (interactive)
  (recenter 0))

;; ispell settings
(setq ispell-personal-dictionary (expand-file-name "~/.emacs.d/ispell/"))
(setq ispell-program-name "/usr/local/bin/ispell")
;;(setq ispell-program-name "/usr/bin/ispell")

;; ERC settings
(setq erc-nick "zpcat")

;; personal func
;; TODO insert a region instead
(defun fortune-cowsay ()
  (interactive)
  (save-excursion
    (goto-char (point-max))
    (insert "\n")
    (insert "------------------")
    (insert "\n")
    (insert (shell-command-to-string "fortune | cowsay"))
    (insert "------------------")))

(defun zpcat-signature ()
  (interactive)
  (save-excursion
    (goto-char (point-max))
    (insert "\n")
    (insert "Regards,\n")
    (insert "Yours\n"))
  (fortune-cowsay))
;; add fortune-cowsay to message-mode-hook
(add-hook 'message-mode-hook 'zpcat-signature)

;; figlet insert some art letters
;; TODO insert a region instead
(defun my-figlet-letter (str)
  (interactive "sType Text: ")
  (when (stringp str)
      (let ((cmd (concat "figlet " str))) 
        (insert (shell-command-to-string cmd)))
      ))

(defun my-get-eval-result (cmd)
  (interactive)
  (save-excursion
    (goto-char (point-max))
    (insert "\n")
    (insert (message "%s" cmd))))

;; mail settings
;; (setq mail-user-agent 'gnus-user-agent)
(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials '(("smtp.gmail.com" 587 "suzp1984@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      smtpmail-local-domain "zxsu.home.com")


(setq Man-switches "-a")

;; (defun my-check-manual (keyword)
;;   "Check current word's manual in emacs."
;;   (interactive 
;;    (let ((defaultkey (current-word))
;;          val)
;;      (setq val (completing-read (if defaultkey 
;;                                     (format "Default Manual( %s ): " defaultkey)
;;                                   "Default Manual: ") nil))
;;      (list val)))
;;   (man keyword))

;; using Gnu Global as tags system
(autoload 'gtags-mode "gtags" "" t)
(setq gtags-suggested-key-mapping t)
(add-hook 'c-mode-common-hook
          '(lambda ()
             (gtags-mode 1)))

(defun source-log-insert (log)
  (interactive "sLog Message: ")
  (insert (format "%s %s <%s> %s" 
                  (format-time-string "%Y-%m-%d %H:%M" (current-time)) 
                  user-full-name 
                  user-mail-address
                  log))
  )

;; bug fix: can not input . when editing c source code.
(unless (boundp 'x-max-tooltip-size)
  (setq x-max-tooltip-size '(80 . 40)))

(provide 'my-misc)
